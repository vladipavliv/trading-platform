// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TRADERCMD_HFT_SERIALIZATION_GEN_FBS_H_
#define FLATBUFFERS_GENERATED_TRADERCMD_HFT_SERIALIZATION_GEN_FBS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 2 &&
              FLATBUFFERS_VERSION_MINOR == 0 &&
              FLATBUFFERS_VERSION_REVISION == 8,
             "Non-compatible flatbuffers version included");

namespace hft {
namespace serialization {
namespace gen {
namespace fbs {

struct TraderCommand;
struct TraderCommandBuilder;
struct TraderCommandT;

enum TraderCommandType : uint8_t {
  TraderCommandType_TradeStart = 0,
  TraderCommandType_TradeStop = 1,
  TraderCommandType_TradeSpeedUp = 2,
  TraderCommandType_TradeSpeedDown = 3,
  TraderCommandType_Shutdown = 4,
  TraderCommandType_MIN = TraderCommandType_TradeStart,
  TraderCommandType_MAX = TraderCommandType_Shutdown
};

inline const TraderCommandType (&EnumValuesTraderCommandType())[5] {
  static const TraderCommandType values[] = {
    TraderCommandType_TradeStart,
    TraderCommandType_TradeStop,
    TraderCommandType_TradeSpeedUp,
    TraderCommandType_TradeSpeedDown,
    TraderCommandType_Shutdown
  };
  return values;
}

inline const char * const *EnumNamesTraderCommandType() {
  static const char * const names[6] = {
    "TradeStart",
    "TradeStop",
    "TradeSpeedUp",
    "TradeSpeedDown",
    "Shutdown",
    nullptr
  };
  return names;
}

inline const char *EnumNameTraderCommandType(TraderCommandType e) {
  if (flatbuffers::IsOutRange(e, TraderCommandType_TradeStart, TraderCommandType_Shutdown)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesTraderCommandType()[index];
}

struct TraderCommandT : public flatbuffers::NativeTable {
  typedef TraderCommand TableType;
  hft::serialization::gen::fbs::TraderCommandType command = hft::serialization::gen::fbs::TraderCommandType_TradeStart;
};

struct TraderCommand FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TraderCommandT NativeTableType;
  typedef TraderCommandBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_COMMAND = 4
  };
  hft::serialization::gen::fbs::TraderCommandType command() const {
    return static_cast<hft::serialization::gen::fbs::TraderCommandType>(GetField<uint8_t>(VT_COMMAND, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_COMMAND, 1) &&
           verifier.EndTable();
  }
  TraderCommandT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(TraderCommandT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<TraderCommand> Pack(flatbuffers::FlatBufferBuilder &_fbb, const TraderCommandT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct TraderCommandBuilder {
  typedef TraderCommand Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_command(hft::serialization::gen::fbs::TraderCommandType command) {
    fbb_.AddElement<uint8_t>(TraderCommand::VT_COMMAND, static_cast<uint8_t>(command), 0);
  }
  explicit TraderCommandBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<TraderCommand> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TraderCommand>(end);
    return o;
  }
};

inline flatbuffers::Offset<TraderCommand> CreateTraderCommand(
    flatbuffers::FlatBufferBuilder &_fbb,
    hft::serialization::gen::fbs::TraderCommandType command = hft::serialization::gen::fbs::TraderCommandType_TradeStart) {
  TraderCommandBuilder builder_(_fbb);
  builder_.add_command(command);
  return builder_.Finish();
}

flatbuffers::Offset<TraderCommand> CreateTraderCommand(flatbuffers::FlatBufferBuilder &_fbb, const TraderCommandT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline TraderCommandT *TraderCommand::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<TraderCommandT>(new TraderCommandT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void TraderCommand::UnPackTo(TraderCommandT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = command(); _o->command = _e; }
}

inline flatbuffers::Offset<TraderCommand> TraderCommand::Pack(flatbuffers::FlatBufferBuilder &_fbb, const TraderCommandT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateTraderCommand(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<TraderCommand> CreateTraderCommand(flatbuffers::FlatBufferBuilder &_fbb, const TraderCommandT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const TraderCommandT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _command = _o->command;
  return hft::serialization::gen::fbs::CreateTraderCommand(
      _fbb,
      _command);
}

inline const hft::serialization::gen::fbs::TraderCommand *GetTraderCommand(const void *buf) {
  return flatbuffers::GetRoot<hft::serialization::gen::fbs::TraderCommand>(buf);
}

inline const hft::serialization::gen::fbs::TraderCommand *GetSizePrefixedTraderCommand(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<hft::serialization::gen::fbs::TraderCommand>(buf);
}

inline bool VerifyTraderCommandBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<hft::serialization::gen::fbs::TraderCommand>(nullptr);
}

inline bool VerifySizePrefixedTraderCommandBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<hft::serialization::gen::fbs::TraderCommand>(nullptr);
}

inline void FinishTraderCommandBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<hft::serialization::gen::fbs::TraderCommand> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTraderCommandBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<hft::serialization::gen::fbs::TraderCommand> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<hft::serialization::gen::fbs::TraderCommandT> UnPackTraderCommand(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<hft::serialization::gen::fbs::TraderCommandT>(GetTraderCommand(buf)->UnPack(res));
}

inline std::unique_ptr<hft::serialization::gen::fbs::TraderCommandT> UnPackSizePrefixedTraderCommand(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<hft::serialization::gen::fbs::TraderCommandT>(GetSizePrefixedTraderCommand(buf)->UnPack(res));
}

}  // namespace fbs
}  // namespace gen
}  // namespace serialization
}  // namespace hft

#endif  // FLATBUFFERS_GENERATED_TRADERCMD_HFT_SERIALIZATION_GEN_FBS_H_
