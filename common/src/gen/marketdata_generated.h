// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MARKETDATA_HFT_SERIALIZATION_GEN_FBS_H_
#define FLATBUFFERS_GENERATED_MARKETDATA_HFT_SERIALIZATION_GEN_FBS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 2 &&
              FLATBUFFERS_VERSION_MINOR == 0 &&
              FLATBUFFERS_VERSION_REVISION == 8,
             "Non-compatible flatbuffers version included");

namespace hft {
namespace serialization {
namespace gen {
namespace fbs {

struct Order;
struct OrderBuilder;
struct OrderT;

struct OrderStatus;
struct OrderStatusBuilder;
struct OrderStatusT;

struct TickerPrice;
struct TickerPriceBuilder;
struct TickerPriceT;

struct Message;
struct MessageBuilder;
struct MessageT;

enum OrderAction : int8_t {
  OrderAction_BUY = 0,
  OrderAction_SELL = 1,
  OrderAction_MIN = OrderAction_BUY,
  OrderAction_MAX = OrderAction_SELL
};

inline const OrderAction (&EnumValuesOrderAction())[2] {
  static const OrderAction values[] = {
    OrderAction_BUY,
    OrderAction_SELL
  };
  return values;
}

inline const char * const *EnumNamesOrderAction() {
  static const char * const names[3] = {
    "BUY",
    "SELL",
    nullptr
  };
  return names;
}

inline const char *EnumNameOrderAction(OrderAction e) {
  if (flatbuffers::IsOutRange(e, OrderAction_BUY, OrderAction_SELL)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesOrderAction()[index];
}

enum OrderState : int32_t {
  OrderState_Accepted = 0,
  OrderState_Partial = 1,
  OrderState_Full = 2,
  OrderState_MIN = OrderState_Accepted,
  OrderState_MAX = OrderState_Full
};

inline const OrderState (&EnumValuesOrderState())[3] {
  static const OrderState values[] = {
    OrderState_Accepted,
    OrderState_Partial,
    OrderState_Full
  };
  return values;
}

inline const char * const *EnumNamesOrderState() {
  static const char * const names[4] = {
    "Accepted",
    "Partial",
    "Full",
    nullptr
  };
  return names;
}

inline const char *EnumNameOrderState(OrderState e) {
  if (flatbuffers::IsOutRange(e, OrderState_Accepted, OrderState_Full)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesOrderState()[index];
}

enum MessageUnion : uint8_t {
  MessageUnion_NONE = 0,
  MessageUnion_Order = 1,
  MessageUnion_OrderStatus = 2,
  MessageUnion_TickerPrice = 3,
  MessageUnion_MIN = MessageUnion_NONE,
  MessageUnion_MAX = MessageUnion_TickerPrice
};

inline const MessageUnion (&EnumValuesMessageUnion())[4] {
  static const MessageUnion values[] = {
    MessageUnion_NONE,
    MessageUnion_Order,
    MessageUnion_OrderStatus,
    MessageUnion_TickerPrice
  };
  return values;
}

inline const char * const *EnumNamesMessageUnion() {
  static const char * const names[5] = {
    "NONE",
    "Order",
    "OrderStatus",
    "TickerPrice",
    nullptr
  };
  return names;
}

inline const char *EnumNameMessageUnion(MessageUnion e) {
  if (flatbuffers::IsOutRange(e, MessageUnion_NONE, MessageUnion_TickerPrice)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMessageUnion()[index];
}

template<typename T> struct MessageUnionTraits {
  static const MessageUnion enum_value = MessageUnion_NONE;
};

template<> struct MessageUnionTraits<hft::serialization::gen::fbs::Order> {
  static const MessageUnion enum_value = MessageUnion_Order;
};

template<> struct MessageUnionTraits<hft::serialization::gen::fbs::OrderStatus> {
  static const MessageUnion enum_value = MessageUnion_OrderStatus;
};

template<> struct MessageUnionTraits<hft::serialization::gen::fbs::TickerPrice> {
  static const MessageUnion enum_value = MessageUnion_TickerPrice;
};

template<typename T> struct MessageUnionUnionTraits {
  static const MessageUnion enum_value = MessageUnion_NONE;
};

template<> struct MessageUnionUnionTraits<hft::serialization::gen::fbs::OrderT> {
  static const MessageUnion enum_value = MessageUnion_Order;
};

template<> struct MessageUnionUnionTraits<hft::serialization::gen::fbs::OrderStatusT> {
  static const MessageUnion enum_value = MessageUnion_OrderStatus;
};

template<> struct MessageUnionUnionTraits<hft::serialization::gen::fbs::TickerPriceT> {
  static const MessageUnion enum_value = MessageUnion_TickerPrice;
};

struct MessageUnionUnion {
  MessageUnion type;
  void *value;

  MessageUnionUnion() : type(MessageUnion_NONE), value(nullptr) {}
  MessageUnionUnion(MessageUnionUnion&& u) FLATBUFFERS_NOEXCEPT :
    type(MessageUnion_NONE), value(nullptr)
    { std::swap(type, u.type); std::swap(value, u.value); }
  MessageUnionUnion(const MessageUnionUnion &);
  MessageUnionUnion &operator=(const MessageUnionUnion &u)
    { MessageUnionUnion t(u); std::swap(type, t.type); std::swap(value, t.value); return *this; }
  MessageUnionUnion &operator=(MessageUnionUnion &&u) FLATBUFFERS_NOEXCEPT
    { std::swap(type, u.type); std::swap(value, u.value); return *this; }
  ~MessageUnionUnion() { Reset(); }

  void Reset();

  template <typename T>
  void Set(T&& val) {
    typedef typename std::remove_reference<T>::type RT;
    Reset();
    type = MessageUnionUnionTraits<RT>::enum_value;
    if (type != MessageUnion_NONE) {
      value = new RT(std::forward<T>(val));
    }
  }

  static void *UnPack(const void *obj, MessageUnion type, const flatbuffers::resolver_function_t *resolver);
  flatbuffers::Offset<void> Pack(flatbuffers::FlatBufferBuilder &_fbb, const flatbuffers::rehasher_function_t *_rehasher = nullptr) const;

  hft::serialization::gen::fbs::OrderT *AsOrder() {
    return type == MessageUnion_Order ?
      reinterpret_cast<hft::serialization::gen::fbs::OrderT *>(value) : nullptr;
  }
  const hft::serialization::gen::fbs::OrderT *AsOrder() const {
    return type == MessageUnion_Order ?
      reinterpret_cast<const hft::serialization::gen::fbs::OrderT *>(value) : nullptr;
  }
  hft::serialization::gen::fbs::OrderStatusT *AsOrderStatus() {
    return type == MessageUnion_OrderStatus ?
      reinterpret_cast<hft::serialization::gen::fbs::OrderStatusT *>(value) : nullptr;
  }
  const hft::serialization::gen::fbs::OrderStatusT *AsOrderStatus() const {
    return type == MessageUnion_OrderStatus ?
      reinterpret_cast<const hft::serialization::gen::fbs::OrderStatusT *>(value) : nullptr;
  }
  hft::serialization::gen::fbs::TickerPriceT *AsTickerPrice() {
    return type == MessageUnion_TickerPrice ?
      reinterpret_cast<hft::serialization::gen::fbs::TickerPriceT *>(value) : nullptr;
  }
  const hft::serialization::gen::fbs::TickerPriceT *AsTickerPrice() const {
    return type == MessageUnion_TickerPrice ?
      reinterpret_cast<const hft::serialization::gen::fbs::TickerPriceT *>(value) : nullptr;
  }
};

bool VerifyMessageUnion(flatbuffers::Verifier &verifier, const void *obj, MessageUnion type);
bool VerifyMessageUnionVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct OrderT : public flatbuffers::NativeTable {
  typedef Order TableType;
  uint32_t id = 0;
  std::string ticker{};
  uint32_t quantity = 0;
  uint32_t price = 0;
  hft::serialization::gen::fbs::OrderAction action = hft::serialization::gen::fbs::OrderAction_BUY;
};

struct Order FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef OrderT NativeTableType;
  typedef OrderBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_TICKER = 6,
    VT_QUANTITY = 8,
    VT_PRICE = 10,
    VT_ACTION = 12
  };
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  const flatbuffers::String *ticker() const {
    return GetPointer<const flatbuffers::String *>(VT_TICKER);
  }
  uint32_t quantity() const {
    return GetField<uint32_t>(VT_QUANTITY, 0);
  }
  uint32_t price() const {
    return GetField<uint32_t>(VT_PRICE, 0);
  }
  hft::serialization::gen::fbs::OrderAction action() const {
    return static_cast<hft::serialization::gen::fbs::OrderAction>(GetField<int8_t>(VT_ACTION, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_TICKER) &&
           verifier.VerifyString(ticker()) &&
           VerifyField<uint32_t>(verifier, VT_QUANTITY, 4) &&
           VerifyField<uint32_t>(verifier, VT_PRICE, 4) &&
           VerifyField<int8_t>(verifier, VT_ACTION, 1) &&
           verifier.EndTable();
  }
  OrderT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(OrderT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Order> Pack(flatbuffers::FlatBufferBuilder &_fbb, const OrderT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct OrderBuilder {
  typedef Order Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(Order::VT_ID, id, 0);
  }
  void add_ticker(flatbuffers::Offset<flatbuffers::String> ticker) {
    fbb_.AddOffset(Order::VT_TICKER, ticker);
  }
  void add_quantity(uint32_t quantity) {
    fbb_.AddElement<uint32_t>(Order::VT_QUANTITY, quantity, 0);
  }
  void add_price(uint32_t price) {
    fbb_.AddElement<uint32_t>(Order::VT_PRICE, price, 0);
  }
  void add_action(hft::serialization::gen::fbs::OrderAction action) {
    fbb_.AddElement<int8_t>(Order::VT_ACTION, static_cast<int8_t>(action), 0);
  }
  explicit OrderBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Order> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Order>(end);
    return o;
  }
};

inline flatbuffers::Offset<Order> CreateOrder(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    flatbuffers::Offset<flatbuffers::String> ticker = 0,
    uint32_t quantity = 0,
    uint32_t price = 0,
    hft::serialization::gen::fbs::OrderAction action = hft::serialization::gen::fbs::OrderAction_BUY) {
  OrderBuilder builder_(_fbb);
  builder_.add_price(price);
  builder_.add_quantity(quantity);
  builder_.add_ticker(ticker);
  builder_.add_id(id);
  builder_.add_action(action);
  return builder_.Finish();
}

inline flatbuffers::Offset<Order> CreateOrderDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    const char *ticker = nullptr,
    uint32_t quantity = 0,
    uint32_t price = 0,
    hft::serialization::gen::fbs::OrderAction action = hft::serialization::gen::fbs::OrderAction_BUY) {
  auto ticker__ = ticker ? _fbb.CreateString(ticker) : 0;
  return hft::serialization::gen::fbs::CreateOrder(
      _fbb,
      id,
      ticker__,
      quantity,
      price,
      action);
}

flatbuffers::Offset<Order> CreateOrder(flatbuffers::FlatBufferBuilder &_fbb, const OrderT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct OrderStatusT : public flatbuffers::NativeTable {
  typedef OrderStatus TableType;
  uint32_t id = 0;
  std::string ticker{};
  uint32_t quantity = 0;
  uint32_t fill_price = 0;
  hft::serialization::gen::fbs::OrderState state = hft::serialization::gen::fbs::OrderState_Accepted;
  hft::serialization::gen::fbs::OrderAction action = hft::serialization::gen::fbs::OrderAction_BUY;
};

struct OrderStatus FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef OrderStatusT NativeTableType;
  typedef OrderStatusBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_TICKER = 6,
    VT_QUANTITY = 8,
    VT_FILL_PRICE = 10,
    VT_STATE = 12,
    VT_ACTION = 14
  };
  uint32_t id() const {
    return GetField<uint32_t>(VT_ID, 0);
  }
  const flatbuffers::String *ticker() const {
    return GetPointer<const flatbuffers::String *>(VT_TICKER);
  }
  uint32_t quantity() const {
    return GetField<uint32_t>(VT_QUANTITY, 0);
  }
  uint32_t fill_price() const {
    return GetField<uint32_t>(VT_FILL_PRICE, 0);
  }
  hft::serialization::gen::fbs::OrderState state() const {
    return static_cast<hft::serialization::gen::fbs::OrderState>(GetField<int32_t>(VT_STATE, 0));
  }
  hft::serialization::gen::fbs::OrderAction action() const {
    return static_cast<hft::serialization::gen::fbs::OrderAction>(GetField<int8_t>(VT_ACTION, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_ID, 4) &&
           VerifyOffset(verifier, VT_TICKER) &&
           verifier.VerifyString(ticker()) &&
           VerifyField<uint32_t>(verifier, VT_QUANTITY, 4) &&
           VerifyField<uint32_t>(verifier, VT_FILL_PRICE, 4) &&
           VerifyField<int32_t>(verifier, VT_STATE, 4) &&
           VerifyField<int8_t>(verifier, VT_ACTION, 1) &&
           verifier.EndTable();
  }
  OrderStatusT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(OrderStatusT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<OrderStatus> Pack(flatbuffers::FlatBufferBuilder &_fbb, const OrderStatusT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct OrderStatusBuilder {
  typedef OrderStatus Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(uint32_t id) {
    fbb_.AddElement<uint32_t>(OrderStatus::VT_ID, id, 0);
  }
  void add_ticker(flatbuffers::Offset<flatbuffers::String> ticker) {
    fbb_.AddOffset(OrderStatus::VT_TICKER, ticker);
  }
  void add_quantity(uint32_t quantity) {
    fbb_.AddElement<uint32_t>(OrderStatus::VT_QUANTITY, quantity, 0);
  }
  void add_fill_price(uint32_t fill_price) {
    fbb_.AddElement<uint32_t>(OrderStatus::VT_FILL_PRICE, fill_price, 0);
  }
  void add_state(hft::serialization::gen::fbs::OrderState state) {
    fbb_.AddElement<int32_t>(OrderStatus::VT_STATE, static_cast<int32_t>(state), 0);
  }
  void add_action(hft::serialization::gen::fbs::OrderAction action) {
    fbb_.AddElement<int8_t>(OrderStatus::VT_ACTION, static_cast<int8_t>(action), 0);
  }
  explicit OrderStatusBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<OrderStatus> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<OrderStatus>(end);
    return o;
  }
};

inline flatbuffers::Offset<OrderStatus> CreateOrderStatus(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    flatbuffers::Offset<flatbuffers::String> ticker = 0,
    uint32_t quantity = 0,
    uint32_t fill_price = 0,
    hft::serialization::gen::fbs::OrderState state = hft::serialization::gen::fbs::OrderState_Accepted,
    hft::serialization::gen::fbs::OrderAction action = hft::serialization::gen::fbs::OrderAction_BUY) {
  OrderStatusBuilder builder_(_fbb);
  builder_.add_state(state);
  builder_.add_fill_price(fill_price);
  builder_.add_quantity(quantity);
  builder_.add_ticker(ticker);
  builder_.add_id(id);
  builder_.add_action(action);
  return builder_.Finish();
}

inline flatbuffers::Offset<OrderStatus> CreateOrderStatusDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t id = 0,
    const char *ticker = nullptr,
    uint32_t quantity = 0,
    uint32_t fill_price = 0,
    hft::serialization::gen::fbs::OrderState state = hft::serialization::gen::fbs::OrderState_Accepted,
    hft::serialization::gen::fbs::OrderAction action = hft::serialization::gen::fbs::OrderAction_BUY) {
  auto ticker__ = ticker ? _fbb.CreateString(ticker) : 0;
  return hft::serialization::gen::fbs::CreateOrderStatus(
      _fbb,
      id,
      ticker__,
      quantity,
      fill_price,
      state,
      action);
}

flatbuffers::Offset<OrderStatus> CreateOrderStatus(flatbuffers::FlatBufferBuilder &_fbb, const OrderStatusT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct TickerPriceT : public flatbuffers::NativeTable {
  typedef TickerPrice TableType;
  std::string ticker{};
  uint32_t price = 0;
};

struct TickerPrice FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TickerPriceT NativeTableType;
  typedef TickerPriceBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TICKER = 4,
    VT_PRICE = 6
  };
  const flatbuffers::String *ticker() const {
    return GetPointer<const flatbuffers::String *>(VT_TICKER);
  }
  uint32_t price() const {
    return GetField<uint32_t>(VT_PRICE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TICKER) &&
           verifier.VerifyString(ticker()) &&
           VerifyField<uint32_t>(verifier, VT_PRICE, 4) &&
           verifier.EndTable();
  }
  TickerPriceT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(TickerPriceT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<TickerPrice> Pack(flatbuffers::FlatBufferBuilder &_fbb, const TickerPriceT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct TickerPriceBuilder {
  typedef TickerPrice Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ticker(flatbuffers::Offset<flatbuffers::String> ticker) {
    fbb_.AddOffset(TickerPrice::VT_TICKER, ticker);
  }
  void add_price(uint32_t price) {
    fbb_.AddElement<uint32_t>(TickerPrice::VT_PRICE, price, 0);
  }
  explicit TickerPriceBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<TickerPrice> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TickerPrice>(end);
    return o;
  }
};

inline flatbuffers::Offset<TickerPrice> CreateTickerPrice(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> ticker = 0,
    uint32_t price = 0) {
  TickerPriceBuilder builder_(_fbb);
  builder_.add_price(price);
  builder_.add_ticker(ticker);
  return builder_.Finish();
}

inline flatbuffers::Offset<TickerPrice> CreateTickerPriceDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *ticker = nullptr,
    uint32_t price = 0) {
  auto ticker__ = ticker ? _fbb.CreateString(ticker) : 0;
  return hft::serialization::gen::fbs::CreateTickerPrice(
      _fbb,
      ticker__,
      price);
}

flatbuffers::Offset<TickerPrice> CreateTickerPrice(flatbuffers::FlatBufferBuilder &_fbb, const TickerPriceT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct MessageT : public flatbuffers::NativeTable {
  typedef Message TableType;
  hft::serialization::gen::fbs::MessageUnionUnion message{};
};

struct Message FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MessageT NativeTableType;
  typedef MessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MESSAGE_TYPE = 4,
    VT_MESSAGE = 6
  };
  hft::serialization::gen::fbs::MessageUnion message_type() const {
    return static_cast<hft::serialization::gen::fbs::MessageUnion>(GetField<uint8_t>(VT_MESSAGE_TYPE, 0));
  }
  const void *message() const {
    return GetPointer<const void *>(VT_MESSAGE);
  }
  template<typename T> const T *message_as() const;
  const hft::serialization::gen::fbs::Order *message_as_Order() const {
    return message_type() == hft::serialization::gen::fbs::MessageUnion_Order ? static_cast<const hft::serialization::gen::fbs::Order *>(message()) : nullptr;
  }
  const hft::serialization::gen::fbs::OrderStatus *message_as_OrderStatus() const {
    return message_type() == hft::serialization::gen::fbs::MessageUnion_OrderStatus ? static_cast<const hft::serialization::gen::fbs::OrderStatus *>(message()) : nullptr;
  }
  const hft::serialization::gen::fbs::TickerPrice *message_as_TickerPrice() const {
    return message_type() == hft::serialization::gen::fbs::MessageUnion_TickerPrice ? static_cast<const hft::serialization::gen::fbs::TickerPrice *>(message()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MESSAGE_TYPE, 1) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           VerifyMessageUnion(verifier, message(), message_type()) &&
           verifier.EndTable();
  }
  MessageT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(MessageT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Message> Pack(flatbuffers::FlatBufferBuilder &_fbb, const MessageT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

template<> inline const hft::serialization::gen::fbs::Order *Message::message_as<hft::serialization::gen::fbs::Order>() const {
  return message_as_Order();
}

template<> inline const hft::serialization::gen::fbs::OrderStatus *Message::message_as<hft::serialization::gen::fbs::OrderStatus>() const {
  return message_as_OrderStatus();
}

template<> inline const hft::serialization::gen::fbs::TickerPrice *Message::message_as<hft::serialization::gen::fbs::TickerPrice>() const {
  return message_as_TickerPrice();
}

struct MessageBuilder {
  typedef Message Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_message_type(hft::serialization::gen::fbs::MessageUnion message_type) {
    fbb_.AddElement<uint8_t>(Message::VT_MESSAGE_TYPE, static_cast<uint8_t>(message_type), 0);
  }
  void add_message(flatbuffers::Offset<void> message) {
    fbb_.AddOffset(Message::VT_MESSAGE, message);
  }
  explicit MessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Message> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Message>(end);
    return o;
  }
};

inline flatbuffers::Offset<Message> CreateMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    hft::serialization::gen::fbs::MessageUnion message_type = hft::serialization::gen::fbs::MessageUnion_NONE,
    flatbuffers::Offset<void> message = 0) {
  MessageBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_message_type(message_type);
  return builder_.Finish();
}

flatbuffers::Offset<Message> CreateMessage(flatbuffers::FlatBufferBuilder &_fbb, const MessageT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline OrderT *Order::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<OrderT>(new OrderT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Order::UnPackTo(OrderT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = id(); _o->id = _e; }
  { auto _e = ticker(); if (_e) _o->ticker = _e->str(); }
  { auto _e = quantity(); _o->quantity = _e; }
  { auto _e = price(); _o->price = _e; }
  { auto _e = action(); _o->action = _e; }
}

inline flatbuffers::Offset<Order> Order::Pack(flatbuffers::FlatBufferBuilder &_fbb, const OrderT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateOrder(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Order> CreateOrder(flatbuffers::FlatBufferBuilder &_fbb, const OrderT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const OrderT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _id = _o->id;
  auto _ticker = _o->ticker.empty() ? 0 : _fbb.CreateString(_o->ticker);
  auto _quantity = _o->quantity;
  auto _price = _o->price;
  auto _action = _o->action;
  return hft::serialization::gen::fbs::CreateOrder(
      _fbb,
      _id,
      _ticker,
      _quantity,
      _price,
      _action);
}

inline OrderStatusT *OrderStatus::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<OrderStatusT>(new OrderStatusT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void OrderStatus::UnPackTo(OrderStatusT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = id(); _o->id = _e; }
  { auto _e = ticker(); if (_e) _o->ticker = _e->str(); }
  { auto _e = quantity(); _o->quantity = _e; }
  { auto _e = fill_price(); _o->fill_price = _e; }
  { auto _e = state(); _o->state = _e; }
  { auto _e = action(); _o->action = _e; }
}

inline flatbuffers::Offset<OrderStatus> OrderStatus::Pack(flatbuffers::FlatBufferBuilder &_fbb, const OrderStatusT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateOrderStatus(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<OrderStatus> CreateOrderStatus(flatbuffers::FlatBufferBuilder &_fbb, const OrderStatusT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const OrderStatusT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _id = _o->id;
  auto _ticker = _o->ticker.empty() ? 0 : _fbb.CreateString(_o->ticker);
  auto _quantity = _o->quantity;
  auto _fill_price = _o->fill_price;
  auto _state = _o->state;
  auto _action = _o->action;
  return hft::serialization::gen::fbs::CreateOrderStatus(
      _fbb,
      _id,
      _ticker,
      _quantity,
      _fill_price,
      _state,
      _action);
}

inline TickerPriceT *TickerPrice::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<TickerPriceT>(new TickerPriceT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void TickerPrice::UnPackTo(TickerPriceT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = ticker(); if (_e) _o->ticker = _e->str(); }
  { auto _e = price(); _o->price = _e; }
}

inline flatbuffers::Offset<TickerPrice> TickerPrice::Pack(flatbuffers::FlatBufferBuilder &_fbb, const TickerPriceT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateTickerPrice(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<TickerPrice> CreateTickerPrice(flatbuffers::FlatBufferBuilder &_fbb, const TickerPriceT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const TickerPriceT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _ticker = _o->ticker.empty() ? 0 : _fbb.CreateString(_o->ticker);
  auto _price = _o->price;
  return hft::serialization::gen::fbs::CreateTickerPrice(
      _fbb,
      _ticker,
      _price);
}

inline MessageT *Message::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<MessageT>(new MessageT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Message::UnPackTo(MessageT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = message_type(); _o->message.type = _e; }
  { auto _e = message(); if (_e) _o->message.value = hft::serialization::gen::fbs::MessageUnionUnion::UnPack(_e, message_type(), _resolver); }
}

inline flatbuffers::Offset<Message> Message::Pack(flatbuffers::FlatBufferBuilder &_fbb, const MessageT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateMessage(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Message> CreateMessage(flatbuffers::FlatBufferBuilder &_fbb, const MessageT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const MessageT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _message_type = _o->message.type;
  auto _message = _o->message.Pack(_fbb);
  return hft::serialization::gen::fbs::CreateMessage(
      _fbb,
      _message_type,
      _message);
}

inline bool VerifyMessageUnion(flatbuffers::Verifier &verifier, const void *obj, MessageUnion type) {
  switch (type) {
    case MessageUnion_NONE: {
      return true;
    }
    case MessageUnion_Order: {
      auto ptr = reinterpret_cast<const hft::serialization::gen::fbs::Order *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageUnion_OrderStatus: {
      auto ptr = reinterpret_cast<const hft::serialization::gen::fbs::OrderStatus *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageUnion_TickerPrice: {
      auto ptr = reinterpret_cast<const hft::serialization::gen::fbs::TickerPrice *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyMessageUnionVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyMessageUnion(
        verifier,  values->Get(i), types->GetEnum<MessageUnion>(i))) {
      return false;
    }
  }
  return true;
}

inline void *MessageUnionUnion::UnPack(const void *obj, MessageUnion type, const flatbuffers::resolver_function_t *resolver) {
  (void)resolver;
  switch (type) {
    case MessageUnion_Order: {
      auto ptr = reinterpret_cast<const hft::serialization::gen::fbs::Order *>(obj);
      return ptr->UnPack(resolver);
    }
    case MessageUnion_OrderStatus: {
      auto ptr = reinterpret_cast<const hft::serialization::gen::fbs::OrderStatus *>(obj);
      return ptr->UnPack(resolver);
    }
    case MessageUnion_TickerPrice: {
      auto ptr = reinterpret_cast<const hft::serialization::gen::fbs::TickerPrice *>(obj);
      return ptr->UnPack(resolver);
    }
    default: return nullptr;
  }
}

inline flatbuffers::Offset<void> MessageUnionUnion::Pack(flatbuffers::FlatBufferBuilder &_fbb, const flatbuffers::rehasher_function_t *_rehasher) const {
  (void)_rehasher;
  switch (type) {
    case MessageUnion_Order: {
      auto ptr = reinterpret_cast<const hft::serialization::gen::fbs::OrderT *>(value);
      return CreateOrder(_fbb, ptr, _rehasher).Union();
    }
    case MessageUnion_OrderStatus: {
      auto ptr = reinterpret_cast<const hft::serialization::gen::fbs::OrderStatusT *>(value);
      return CreateOrderStatus(_fbb, ptr, _rehasher).Union();
    }
    case MessageUnion_TickerPrice: {
      auto ptr = reinterpret_cast<const hft::serialization::gen::fbs::TickerPriceT *>(value);
      return CreateTickerPrice(_fbb, ptr, _rehasher).Union();
    }
    default: return 0;
  }
}

inline MessageUnionUnion::MessageUnionUnion(const MessageUnionUnion &u) : type(u.type), value(nullptr) {
  switch (type) {
    case MessageUnion_Order: {
      value = new hft::serialization::gen::fbs::OrderT(*reinterpret_cast<hft::serialization::gen::fbs::OrderT *>(u.value));
      break;
    }
    case MessageUnion_OrderStatus: {
      value = new hft::serialization::gen::fbs::OrderStatusT(*reinterpret_cast<hft::serialization::gen::fbs::OrderStatusT *>(u.value));
      break;
    }
    case MessageUnion_TickerPrice: {
      value = new hft::serialization::gen::fbs::TickerPriceT(*reinterpret_cast<hft::serialization::gen::fbs::TickerPriceT *>(u.value));
      break;
    }
    default:
      break;
  }
}

inline void MessageUnionUnion::Reset() {
  switch (type) {
    case MessageUnion_Order: {
      auto ptr = reinterpret_cast<hft::serialization::gen::fbs::OrderT *>(value);
      delete ptr;
      break;
    }
    case MessageUnion_OrderStatus: {
      auto ptr = reinterpret_cast<hft::serialization::gen::fbs::OrderStatusT *>(value);
      delete ptr;
      break;
    }
    case MessageUnion_TickerPrice: {
      auto ptr = reinterpret_cast<hft::serialization::gen::fbs::TickerPriceT *>(value);
      delete ptr;
      break;
    }
    default: break;
  }
  value = nullptr;
  type = MessageUnion_NONE;
}

inline const hft::serialization::gen::fbs::Message *GetMessage(const void *buf) {
  return flatbuffers::GetRoot<hft::serialization::gen::fbs::Message>(buf);
}

inline const hft::serialization::gen::fbs::Message *GetSizePrefixedMessage(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<hft::serialization::gen::fbs::Message>(buf);
}

inline bool VerifyMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<hft::serialization::gen::fbs::Message>(nullptr);
}

inline bool VerifySizePrefixedMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<hft::serialization::gen::fbs::Message>(nullptr);
}

inline void FinishMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<hft::serialization::gen::fbs::Message> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<hft::serialization::gen::fbs::Message> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<hft::serialization::gen::fbs::MessageT> UnPackMessage(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<hft::serialization::gen::fbs::MessageT>(GetMessage(buf)->UnPack(res));
}

inline std::unique_ptr<hft::serialization::gen::fbs::MessageT> UnPackSizePrefixedMessage(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<hft::serialization::gen::fbs::MessageT>(GetSizePrefixedMessage(buf)->UnPack(res));
}

}  // namespace fbs
}  // namespace gen
}  // namespace serialization
}  // namespace hft

#endif  // FLATBUFFERS_GENERATED_MARKETDATA_HFT_SERIALIZATION_GEN_FBS_H_
