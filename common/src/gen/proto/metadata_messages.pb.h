// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metadata_messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_metadata_5fmessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_metadata_5fmessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_metadata_5fmessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_metadata_5fmessages_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_metadata_5fmessages_2eproto;
namespace hft {
namespace serialization {
namespace gen {
namespace proto {
namespace metadata {
class ClientCommand;
struct ClientCommandDefaultTypeInternal;
extern ClientCommandDefaultTypeInternal _ClientCommand_default_instance_;
class LogEntry;
struct LogEntryDefaultTypeInternal;
extern LogEntryDefaultTypeInternal _LogEntry_default_instance_;
class OrderTimestamp;
struct OrderTimestampDefaultTypeInternal;
extern OrderTimestampDefaultTypeInternal _OrderTimestamp_default_instance_;
class RuntimeMetrics;
struct RuntimeMetricsDefaultTypeInternal;
extern RuntimeMetricsDefaultTypeInternal _RuntimeMetrics_default_instance_;
class ServerCommand;
struct ServerCommandDefaultTypeInternal;
extern ServerCommandDefaultTypeInternal _ServerCommand_default_instance_;
}  // namespace metadata
}  // namespace proto
}  // namespace gen
}  // namespace serialization
}  // namespace hft
PROTOBUF_NAMESPACE_OPEN
template<> ::hft::serialization::gen::proto::metadata::ClientCommand* Arena::CreateMaybeMessage<::hft::serialization::gen::proto::metadata::ClientCommand>(Arena*);
template<> ::hft::serialization::gen::proto::metadata::LogEntry* Arena::CreateMaybeMessage<::hft::serialization::gen::proto::metadata::LogEntry>(Arena*);
template<> ::hft::serialization::gen::proto::metadata::OrderTimestamp* Arena::CreateMaybeMessage<::hft::serialization::gen::proto::metadata::OrderTimestamp>(Arena*);
template<> ::hft::serialization::gen::proto::metadata::RuntimeMetrics* Arena::CreateMaybeMessage<::hft::serialization::gen::proto::metadata::RuntimeMetrics>(Arena*);
template<> ::hft::serialization::gen::proto::metadata::ServerCommand* Arena::CreateMaybeMessage<::hft::serialization::gen::proto::metadata::ServerCommand>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace hft {
namespace serialization {
namespace gen {
namespace proto {
namespace metadata {

enum ClientCommand_Type : int {
  ClientCommand_Type_UNKNOWN = 0,
  ClientCommand_Type_TRADE_START = 1,
  ClientCommand_Type_TRADE_STOP = 2,
  ClientCommand_Type_TRADE_SPEED_UP = 3,
  ClientCommand_Type_TRADE_SPEED_DOWN = 4,
  ClientCommand_Type_KAFKA_FEED_START = 5,
  ClientCommand_Type_KAFKA_FEED_STOP = 6,
  ClientCommand_Type_STOP = 7,
  ClientCommand_Type_ClientCommand_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ClientCommand_Type_ClientCommand_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ClientCommand_Type_IsValid(int value);
constexpr ClientCommand_Type ClientCommand_Type_Type_MIN = ClientCommand_Type_UNKNOWN;
constexpr ClientCommand_Type ClientCommand_Type_Type_MAX = ClientCommand_Type_STOP;
constexpr int ClientCommand_Type_Type_ARRAYSIZE = ClientCommand_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientCommand_Type_descriptor();
template<typename T>
inline const std::string& ClientCommand_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientCommand_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientCommand_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientCommand_Type_descriptor(), enum_t_value);
}
inline bool ClientCommand_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientCommand_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientCommand_Type>(
    ClientCommand_Type_descriptor(), name, value);
}
enum ServerCommand_Type : int {
  ServerCommand_Type_UNKNOWN = 0,
  ServerCommand_Type_PRICE_FEED_START = 1,
  ServerCommand_Type_PRICE_FEED_STOP = 2,
  ServerCommand_Type_KAFKA_FEED_START = 3,
  ServerCommand_Type_KAFKA_FEED_STOP = 4,
  ServerCommand_Type_STOP = 5,
  ServerCommand_Type_ServerCommand_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ServerCommand_Type_ServerCommand_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ServerCommand_Type_IsValid(int value);
constexpr ServerCommand_Type ServerCommand_Type_Type_MIN = ServerCommand_Type_UNKNOWN;
constexpr ServerCommand_Type ServerCommand_Type_Type_MAX = ServerCommand_Type_STOP;
constexpr int ServerCommand_Type_Type_ARRAYSIZE = ServerCommand_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerCommand_Type_descriptor();
template<typename T>
inline const std::string& ServerCommand_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServerCommand_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServerCommand_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServerCommand_Type_descriptor(), enum_t_value);
}
inline bool ServerCommand_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServerCommand_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServerCommand_Type>(
    ServerCommand_Type_descriptor(), name, value);
}
enum Source : int {
  UNKNOWN = 0,
  CLIENT = 1,
  SERVER = 2,
  Source_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Source_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Source_IsValid(int value);
constexpr Source Source_MIN = UNKNOWN;
constexpr Source Source_MAX = SERVER;
constexpr int Source_ARRAYSIZE = Source_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Source_descriptor();
template<typename T>
inline const std::string& Source_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Source>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Source_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Source_descriptor(), enum_t_value);
}
inline bool Source_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Source* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Source>(
    Source_descriptor(), name, value);
}
// ===================================================================

class OrderTimestamp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hft.serialization.gen.proto.metadata.OrderTimestamp) */ {
 public:
  inline OrderTimestamp() : OrderTimestamp(nullptr) {}
  ~OrderTimestamp() override;
  explicit PROTOBUF_CONSTEXPR OrderTimestamp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderTimestamp(const OrderTimestamp& from);
  OrderTimestamp(OrderTimestamp&& from) noexcept
    : OrderTimestamp() {
    *this = ::std::move(from);
  }

  inline OrderTimestamp& operator=(const OrderTimestamp& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderTimestamp& operator=(OrderTimestamp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderTimestamp& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderTimestamp* internal_default_instance() {
    return reinterpret_cast<const OrderTimestamp*>(
               &_OrderTimestamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OrderTimestamp& a, OrderTimestamp& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderTimestamp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderTimestamp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderTimestamp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderTimestamp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderTimestamp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OrderTimestamp& from) {
    OrderTimestamp::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderTimestamp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hft.serialization.gen.proto.metadata.OrderTimestamp";
  }
  protected:
  explicit OrderTimestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 1,
    kCreatedFieldNumber = 2,
    kFulfilledFieldNumber = 3,
    kNotifiedFieldNumber = 4,
  };
  // uint64 order_id = 1;
  void clear_order_id();
  uint64_t order_id() const;
  void set_order_id(uint64_t value);
  private:
  uint64_t _internal_order_id() const;
  void _internal_set_order_id(uint64_t value);
  public:

  // uint64 created = 2;
  void clear_created();
  uint64_t created() const;
  void set_created(uint64_t value);
  private:
  uint64_t _internal_created() const;
  void _internal_set_created(uint64_t value);
  public:

  // uint64 fulfilled = 3;
  void clear_fulfilled();
  uint64_t fulfilled() const;
  void set_fulfilled(uint64_t value);
  private:
  uint64_t _internal_fulfilled() const;
  void _internal_set_fulfilled(uint64_t value);
  public:

  // uint64 notified = 4;
  void clear_notified();
  uint64_t notified() const;
  void set_notified(uint64_t value);
  private:
  uint64_t _internal_notified() const;
  void _internal_set_notified(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:hft.serialization.gen.proto.metadata.OrderTimestamp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t order_id_;
    uint64_t created_;
    uint64_t fulfilled_;
    uint64_t notified_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_metadata_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class ClientCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hft.serialization.gen.proto.metadata.ClientCommand) */ {
 public:
  inline ClientCommand() : ClientCommand(nullptr) {}
  ~ClientCommand() override;
  explicit PROTOBUF_CONSTEXPR ClientCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientCommand(const ClientCommand& from);
  ClientCommand(ClientCommand&& from) noexcept
    : ClientCommand() {
    *this = ::std::move(from);
  }

  inline ClientCommand& operator=(const ClientCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientCommand& operator=(ClientCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientCommand* internal_default_instance() {
    return reinterpret_cast<const ClientCommand*>(
               &_ClientCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClientCommand& a, ClientCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClientCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ClientCommand& from) {
    ClientCommand::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientCommand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hft.serialization.gen.proto.metadata.ClientCommand";
  }
  protected:
  explicit ClientCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ClientCommand_Type Type;
  static constexpr Type UNKNOWN =
    ClientCommand_Type_UNKNOWN;
  static constexpr Type TRADE_START =
    ClientCommand_Type_TRADE_START;
  static constexpr Type TRADE_STOP =
    ClientCommand_Type_TRADE_STOP;
  static constexpr Type TRADE_SPEED_UP =
    ClientCommand_Type_TRADE_SPEED_UP;
  static constexpr Type TRADE_SPEED_DOWN =
    ClientCommand_Type_TRADE_SPEED_DOWN;
  static constexpr Type KAFKA_FEED_START =
    ClientCommand_Type_KAFKA_FEED_START;
  static constexpr Type KAFKA_FEED_STOP =
    ClientCommand_Type_KAFKA_FEED_STOP;
  static constexpr Type STOP =
    ClientCommand_Type_STOP;
  static inline bool Type_IsValid(int value) {
    return ClientCommand_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    ClientCommand_Type_Type_MIN;
  static constexpr Type Type_MAX =
    ClientCommand_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    ClientCommand_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return ClientCommand_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return ClientCommand_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return ClientCommand_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .hft.serialization.gen.proto.metadata.ClientCommand.Type type = 1;
  void clear_type();
  ::hft::serialization::gen::proto::metadata::ClientCommand_Type type() const;
  void set_type(::hft::serialization::gen::proto::metadata::ClientCommand_Type value);
  private:
  ::hft::serialization::gen::proto::metadata::ClientCommand_Type _internal_type() const;
  void _internal_set_type(::hft::serialization::gen::proto::metadata::ClientCommand_Type value);
  public:

  // @@protoc_insertion_point(class_scope:hft.serialization.gen.proto.metadata.ClientCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_metadata_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class ServerCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hft.serialization.gen.proto.metadata.ServerCommand) */ {
 public:
  inline ServerCommand() : ServerCommand(nullptr) {}
  ~ServerCommand() override;
  explicit PROTOBUF_CONSTEXPR ServerCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerCommand(const ServerCommand& from);
  ServerCommand(ServerCommand&& from) noexcept
    : ServerCommand() {
    *this = ::std::move(from);
  }

  inline ServerCommand& operator=(const ServerCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerCommand& operator=(ServerCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerCommand* internal_default_instance() {
    return reinterpret_cast<const ServerCommand*>(
               &_ServerCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServerCommand& a, ServerCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerCommand& from) {
    ServerCommand::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerCommand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hft.serialization.gen.proto.metadata.ServerCommand";
  }
  protected:
  explicit ServerCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ServerCommand_Type Type;
  static constexpr Type UNKNOWN =
    ServerCommand_Type_UNKNOWN;
  static constexpr Type PRICE_FEED_START =
    ServerCommand_Type_PRICE_FEED_START;
  static constexpr Type PRICE_FEED_STOP =
    ServerCommand_Type_PRICE_FEED_STOP;
  static constexpr Type KAFKA_FEED_START =
    ServerCommand_Type_KAFKA_FEED_START;
  static constexpr Type KAFKA_FEED_STOP =
    ServerCommand_Type_KAFKA_FEED_STOP;
  static constexpr Type STOP =
    ServerCommand_Type_STOP;
  static inline bool Type_IsValid(int value) {
    return ServerCommand_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    ServerCommand_Type_Type_MIN;
  static constexpr Type Type_MAX =
    ServerCommand_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    ServerCommand_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return ServerCommand_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return ServerCommand_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return ServerCommand_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .hft.serialization.gen.proto.metadata.ServerCommand.Type type = 1;
  void clear_type();
  ::hft::serialization::gen::proto::metadata::ServerCommand_Type type() const;
  void set_type(::hft::serialization::gen::proto::metadata::ServerCommand_Type value);
  private:
  ::hft::serialization::gen::proto::metadata::ServerCommand_Type _internal_type() const;
  void _internal_set_type(::hft::serialization::gen::proto::metadata::ServerCommand_Type value);
  public:

  // @@protoc_insertion_point(class_scope:hft.serialization.gen.proto.metadata.ServerCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_metadata_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class LogEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hft.serialization.gen.proto.metadata.LogEntry) */ {
 public:
  inline LogEntry() : LogEntry(nullptr) {}
  ~LogEntry() override;
  explicit PROTOBUF_CONSTEXPR LogEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogEntry(const LogEntry& from);
  LogEntry(LogEntry&& from) noexcept
    : LogEntry() {
    *this = ::std::move(from);
  }

  inline LogEntry& operator=(const LogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogEntry& operator=(LogEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogEntry* internal_default_instance() {
    return reinterpret_cast<const LogEntry*>(
               &_LogEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LogEntry& a, LogEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(LogEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LogEntry& from) {
    LogEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hft.serialization.gen.proto.metadata.LogEntry";
  }
  protected:
  explicit LogEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kLevelFieldNumber = 3,
    kSourceFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string level = 3;
  void clear_level();
  const std::string& level() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_level(ArgT0&& arg0, ArgT... args);
  std::string* mutable_level();
  PROTOBUF_NODISCARD std::string* release_level();
  void set_allocated_level(std::string* level);
  private:
  const std::string& _internal_level() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_level(const std::string& value);
  std::string* _internal_mutable_level();
  public:

  // .hft.serialization.gen.proto.metadata.Source source = 1;
  void clear_source();
  ::hft::serialization::gen::proto::metadata::Source source() const;
  void set_source(::hft::serialization::gen::proto::metadata::Source value);
  private:
  ::hft::serialization::gen::proto::metadata::Source _internal_source() const;
  void _internal_set_source(::hft::serialization::gen::proto::metadata::Source value);
  public:

  // @@protoc_insertion_point(class_scope:hft.serialization.gen.proto.metadata.LogEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr level_;
    int source_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_metadata_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class RuntimeMetrics final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:hft.serialization.gen.proto.metadata.RuntimeMetrics) */ {
 public:
  inline RuntimeMetrics() : RuntimeMetrics(nullptr) {}
  ~RuntimeMetrics() override;
  explicit PROTOBUF_CONSTEXPR RuntimeMetrics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RuntimeMetrics(const RuntimeMetrics& from);
  RuntimeMetrics(RuntimeMetrics&& from) noexcept
    : RuntimeMetrics() {
    *this = ::std::move(from);
  }

  inline RuntimeMetrics& operator=(const RuntimeMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuntimeMetrics& operator=(RuntimeMetrics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RuntimeMetrics& default_instance() {
    return *internal_default_instance();
  }
  static inline const RuntimeMetrics* internal_default_instance() {
    return reinterpret_cast<const RuntimeMetrics*>(
               &_RuntimeMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RuntimeMetrics& a, RuntimeMetrics& b) {
    a.Swap(&b);
  }
  inline void Swap(RuntimeMetrics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuntimeMetrics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RuntimeMetrics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RuntimeMetrics>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RuntimeMetrics& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RuntimeMetrics& from) {
    RuntimeMetrics::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuntimeMetrics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "hft.serialization.gen.proto.metadata.RuntimeMetrics";
  }
  protected:
  explicit RuntimeMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampMsFieldNumber = 2,
    kSourceFieldNumber = 1,
    kOpenConnectionsFieldNumber = 4,
    kRpsFieldNumber = 3,
    kAvgLatencyUsFieldNumber = 5,
  };
  // int64 timestamp_ms = 2;
  void clear_timestamp_ms();
  int64_t timestamp_ms() const;
  void set_timestamp_ms(int64_t value);
  private:
  int64_t _internal_timestamp_ms() const;
  void _internal_set_timestamp_ms(int64_t value);
  public:

  // .hft.serialization.gen.proto.metadata.Source source = 1;
  void clear_source();
  ::hft::serialization::gen::proto::metadata::Source source() const;
  void set_source(::hft::serialization::gen::proto::metadata::Source value);
  private:
  ::hft::serialization::gen::proto::metadata::Source _internal_source() const;
  void _internal_set_source(::hft::serialization::gen::proto::metadata::Source value);
  public:

  // int32 open_connections = 4;
  void clear_open_connections();
  int32_t open_connections() const;
  void set_open_connections(int32_t value);
  private:
  int32_t _internal_open_connections() const;
  void _internal_set_open_connections(int32_t value);
  public:

  // double rps = 3;
  void clear_rps();
  double rps() const;
  void set_rps(double value);
  private:
  double _internal_rps() const;
  void _internal_set_rps(double value);
  public:

  // double avg_latency_us = 5;
  void clear_avg_latency_us();
  double avg_latency_us() const;
  void set_avg_latency_us(double value);
  private:
  double _internal_avg_latency_us() const;
  void _internal_set_avg_latency_us(double value);
  public:

  // @@protoc_insertion_point(class_scope:hft.serialization.gen.proto.metadata.RuntimeMetrics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t timestamp_ms_;
    int source_;
    int32_t open_connections_;
    double rps_;
    double avg_latency_us_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_metadata_5fmessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OrderTimestamp

// uint64 order_id = 1;
inline void OrderTimestamp::clear_order_id() {
  _impl_.order_id_ = uint64_t{0u};
}
inline uint64_t OrderTimestamp::_internal_order_id() const {
  return _impl_.order_id_;
}
inline uint64_t OrderTimestamp::order_id() const {
  // @@protoc_insertion_point(field_get:hft.serialization.gen.proto.metadata.OrderTimestamp.order_id)
  return _internal_order_id();
}
inline void OrderTimestamp::_internal_set_order_id(uint64_t value) {
  
  _impl_.order_id_ = value;
}
inline void OrderTimestamp::set_order_id(uint64_t value) {
  _internal_set_order_id(value);
  // @@protoc_insertion_point(field_set:hft.serialization.gen.proto.metadata.OrderTimestamp.order_id)
}

// uint64 created = 2;
inline void OrderTimestamp::clear_created() {
  _impl_.created_ = uint64_t{0u};
}
inline uint64_t OrderTimestamp::_internal_created() const {
  return _impl_.created_;
}
inline uint64_t OrderTimestamp::created() const {
  // @@protoc_insertion_point(field_get:hft.serialization.gen.proto.metadata.OrderTimestamp.created)
  return _internal_created();
}
inline void OrderTimestamp::_internal_set_created(uint64_t value) {
  
  _impl_.created_ = value;
}
inline void OrderTimestamp::set_created(uint64_t value) {
  _internal_set_created(value);
  // @@protoc_insertion_point(field_set:hft.serialization.gen.proto.metadata.OrderTimestamp.created)
}

// uint64 fulfilled = 3;
inline void OrderTimestamp::clear_fulfilled() {
  _impl_.fulfilled_ = uint64_t{0u};
}
inline uint64_t OrderTimestamp::_internal_fulfilled() const {
  return _impl_.fulfilled_;
}
inline uint64_t OrderTimestamp::fulfilled() const {
  // @@protoc_insertion_point(field_get:hft.serialization.gen.proto.metadata.OrderTimestamp.fulfilled)
  return _internal_fulfilled();
}
inline void OrderTimestamp::_internal_set_fulfilled(uint64_t value) {
  
  _impl_.fulfilled_ = value;
}
inline void OrderTimestamp::set_fulfilled(uint64_t value) {
  _internal_set_fulfilled(value);
  // @@protoc_insertion_point(field_set:hft.serialization.gen.proto.metadata.OrderTimestamp.fulfilled)
}

// uint64 notified = 4;
inline void OrderTimestamp::clear_notified() {
  _impl_.notified_ = uint64_t{0u};
}
inline uint64_t OrderTimestamp::_internal_notified() const {
  return _impl_.notified_;
}
inline uint64_t OrderTimestamp::notified() const {
  // @@protoc_insertion_point(field_get:hft.serialization.gen.proto.metadata.OrderTimestamp.notified)
  return _internal_notified();
}
inline void OrderTimestamp::_internal_set_notified(uint64_t value) {
  
  _impl_.notified_ = value;
}
inline void OrderTimestamp::set_notified(uint64_t value) {
  _internal_set_notified(value);
  // @@protoc_insertion_point(field_set:hft.serialization.gen.proto.metadata.OrderTimestamp.notified)
}

// -------------------------------------------------------------------

// ClientCommand

// .hft.serialization.gen.proto.metadata.ClientCommand.Type type = 1;
inline void ClientCommand::clear_type() {
  _impl_.type_ = 0;
}
inline ::hft::serialization::gen::proto::metadata::ClientCommand_Type ClientCommand::_internal_type() const {
  return static_cast< ::hft::serialization::gen::proto::metadata::ClientCommand_Type >(_impl_.type_);
}
inline ::hft::serialization::gen::proto::metadata::ClientCommand_Type ClientCommand::type() const {
  // @@protoc_insertion_point(field_get:hft.serialization.gen.proto.metadata.ClientCommand.type)
  return _internal_type();
}
inline void ClientCommand::_internal_set_type(::hft::serialization::gen::proto::metadata::ClientCommand_Type value) {
  
  _impl_.type_ = value;
}
inline void ClientCommand::set_type(::hft::serialization::gen::proto::metadata::ClientCommand_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:hft.serialization.gen.proto.metadata.ClientCommand.type)
}

// -------------------------------------------------------------------

// ServerCommand

// .hft.serialization.gen.proto.metadata.ServerCommand.Type type = 1;
inline void ServerCommand::clear_type() {
  _impl_.type_ = 0;
}
inline ::hft::serialization::gen::proto::metadata::ServerCommand_Type ServerCommand::_internal_type() const {
  return static_cast< ::hft::serialization::gen::proto::metadata::ServerCommand_Type >(_impl_.type_);
}
inline ::hft::serialization::gen::proto::metadata::ServerCommand_Type ServerCommand::type() const {
  // @@protoc_insertion_point(field_get:hft.serialization.gen.proto.metadata.ServerCommand.type)
  return _internal_type();
}
inline void ServerCommand::_internal_set_type(::hft::serialization::gen::proto::metadata::ServerCommand_Type value) {
  
  _impl_.type_ = value;
}
inline void ServerCommand::set_type(::hft::serialization::gen::proto::metadata::ServerCommand_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:hft.serialization.gen.proto.metadata.ServerCommand.type)
}

// -------------------------------------------------------------------

// LogEntry

// .hft.serialization.gen.proto.metadata.Source source = 1;
inline void LogEntry::clear_source() {
  _impl_.source_ = 0;
}
inline ::hft::serialization::gen::proto::metadata::Source LogEntry::_internal_source() const {
  return static_cast< ::hft::serialization::gen::proto::metadata::Source >(_impl_.source_);
}
inline ::hft::serialization::gen::proto::metadata::Source LogEntry::source() const {
  // @@protoc_insertion_point(field_get:hft.serialization.gen.proto.metadata.LogEntry.source)
  return _internal_source();
}
inline void LogEntry::_internal_set_source(::hft::serialization::gen::proto::metadata::Source value) {
  
  _impl_.source_ = value;
}
inline void LogEntry::set_source(::hft::serialization::gen::proto::metadata::Source value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:hft.serialization.gen.proto.metadata.LogEntry.source)
}

// string message = 2;
inline void LogEntry::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& LogEntry::message() const {
  // @@protoc_insertion_point(field_get:hft.serialization.gen.proto.metadata.LogEntry.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogEntry::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hft.serialization.gen.proto.metadata.LogEntry.message)
}
inline std::string* LogEntry::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:hft.serialization.gen.proto.metadata.LogEntry.message)
  return _s;
}
inline const std::string& LogEntry::_internal_message() const {
  return _impl_.message_.Get();
}
inline void LogEntry::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* LogEntry::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* LogEntry::release_message() {
  // @@protoc_insertion_point(field_release:hft.serialization.gen.proto.metadata.LogEntry.message)
  return _impl_.message_.Release();
}
inline void LogEntry::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hft.serialization.gen.proto.metadata.LogEntry.message)
}

// string level = 3;
inline void LogEntry::clear_level() {
  _impl_.level_.ClearToEmpty();
}
inline const std::string& LogEntry::level() const {
  // @@protoc_insertion_point(field_get:hft.serialization.gen.proto.metadata.LogEntry.level)
  return _internal_level();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LogEntry::set_level(ArgT0&& arg0, ArgT... args) {
 
 _impl_.level_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:hft.serialization.gen.proto.metadata.LogEntry.level)
}
inline std::string* LogEntry::mutable_level() {
  std::string* _s = _internal_mutable_level();
  // @@protoc_insertion_point(field_mutable:hft.serialization.gen.proto.metadata.LogEntry.level)
  return _s;
}
inline const std::string& LogEntry::_internal_level() const {
  return _impl_.level_.Get();
}
inline void LogEntry::_internal_set_level(const std::string& value) {
  
  _impl_.level_.Set(value, GetArenaForAllocation());
}
inline std::string* LogEntry::_internal_mutable_level() {
  
  return _impl_.level_.Mutable(GetArenaForAllocation());
}
inline std::string* LogEntry::release_level() {
  // @@protoc_insertion_point(field_release:hft.serialization.gen.proto.metadata.LogEntry.level)
  return _impl_.level_.Release();
}
inline void LogEntry::set_allocated_level(std::string* level) {
  if (level != nullptr) {
    
  } else {
    
  }
  _impl_.level_.SetAllocated(level, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.level_.IsDefault()) {
    _impl_.level_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:hft.serialization.gen.proto.metadata.LogEntry.level)
}

// -------------------------------------------------------------------

// RuntimeMetrics

// .hft.serialization.gen.proto.metadata.Source source = 1;
inline void RuntimeMetrics::clear_source() {
  _impl_.source_ = 0;
}
inline ::hft::serialization::gen::proto::metadata::Source RuntimeMetrics::_internal_source() const {
  return static_cast< ::hft::serialization::gen::proto::metadata::Source >(_impl_.source_);
}
inline ::hft::serialization::gen::proto::metadata::Source RuntimeMetrics::source() const {
  // @@protoc_insertion_point(field_get:hft.serialization.gen.proto.metadata.RuntimeMetrics.source)
  return _internal_source();
}
inline void RuntimeMetrics::_internal_set_source(::hft::serialization::gen::proto::metadata::Source value) {
  
  _impl_.source_ = value;
}
inline void RuntimeMetrics::set_source(::hft::serialization::gen::proto::metadata::Source value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:hft.serialization.gen.proto.metadata.RuntimeMetrics.source)
}

// int64 timestamp_ms = 2;
inline void RuntimeMetrics::clear_timestamp_ms() {
  _impl_.timestamp_ms_ = int64_t{0};
}
inline int64_t RuntimeMetrics::_internal_timestamp_ms() const {
  return _impl_.timestamp_ms_;
}
inline int64_t RuntimeMetrics::timestamp_ms() const {
  // @@protoc_insertion_point(field_get:hft.serialization.gen.proto.metadata.RuntimeMetrics.timestamp_ms)
  return _internal_timestamp_ms();
}
inline void RuntimeMetrics::_internal_set_timestamp_ms(int64_t value) {
  
  _impl_.timestamp_ms_ = value;
}
inline void RuntimeMetrics::set_timestamp_ms(int64_t value) {
  _internal_set_timestamp_ms(value);
  // @@protoc_insertion_point(field_set:hft.serialization.gen.proto.metadata.RuntimeMetrics.timestamp_ms)
}

// double rps = 3;
inline void RuntimeMetrics::clear_rps() {
  _impl_.rps_ = 0;
}
inline double RuntimeMetrics::_internal_rps() const {
  return _impl_.rps_;
}
inline double RuntimeMetrics::rps() const {
  // @@protoc_insertion_point(field_get:hft.serialization.gen.proto.metadata.RuntimeMetrics.rps)
  return _internal_rps();
}
inline void RuntimeMetrics::_internal_set_rps(double value) {
  
  _impl_.rps_ = value;
}
inline void RuntimeMetrics::set_rps(double value) {
  _internal_set_rps(value);
  // @@protoc_insertion_point(field_set:hft.serialization.gen.proto.metadata.RuntimeMetrics.rps)
}

// int32 open_connections = 4;
inline void RuntimeMetrics::clear_open_connections() {
  _impl_.open_connections_ = 0;
}
inline int32_t RuntimeMetrics::_internal_open_connections() const {
  return _impl_.open_connections_;
}
inline int32_t RuntimeMetrics::open_connections() const {
  // @@protoc_insertion_point(field_get:hft.serialization.gen.proto.metadata.RuntimeMetrics.open_connections)
  return _internal_open_connections();
}
inline void RuntimeMetrics::_internal_set_open_connections(int32_t value) {
  
  _impl_.open_connections_ = value;
}
inline void RuntimeMetrics::set_open_connections(int32_t value) {
  _internal_set_open_connections(value);
  // @@protoc_insertion_point(field_set:hft.serialization.gen.proto.metadata.RuntimeMetrics.open_connections)
}

// double avg_latency_us = 5;
inline void RuntimeMetrics::clear_avg_latency_us() {
  _impl_.avg_latency_us_ = 0;
}
inline double RuntimeMetrics::_internal_avg_latency_us() const {
  return _impl_.avg_latency_us_;
}
inline double RuntimeMetrics::avg_latency_us() const {
  // @@protoc_insertion_point(field_get:hft.serialization.gen.proto.metadata.RuntimeMetrics.avg_latency_us)
  return _internal_avg_latency_us();
}
inline void RuntimeMetrics::_internal_set_avg_latency_us(double value) {
  
  _impl_.avg_latency_us_ = value;
}
inline void RuntimeMetrics::set_avg_latency_us(double value) {
  _internal_set_avg_latency_us(value);
  // @@protoc_insertion_point(field_set:hft.serialization.gen.proto.metadata.RuntimeMetrics.avg_latency_us)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace metadata
}  // namespace proto
}  // namespace gen
}  // namespace serialization
}  // namespace hft

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::hft::serialization::gen::proto::metadata::ClientCommand_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hft::serialization::gen::proto::metadata::ClientCommand_Type>() {
  return ::hft::serialization::gen::proto::metadata::ClientCommand_Type_descriptor();
}
template <> struct is_proto_enum< ::hft::serialization::gen::proto::metadata::ServerCommand_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hft::serialization::gen::proto::metadata::ServerCommand_Type>() {
  return ::hft::serialization::gen::proto::metadata::ServerCommand_Type_descriptor();
}
template <> struct is_proto_enum< ::hft::serialization::gen::proto::metadata::Source> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hft::serialization::gen::proto::metadata::Source>() {
  return ::hft::serialization::gen::proto::metadata::Source_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_metadata_5fmessages_2eproto
