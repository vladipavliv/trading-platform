// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metadata_messages.proto

#include "metadata_messages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace hft {
namespace serialization {
namespace gen {
namespace proto {
namespace metadata {
PROTOBUF_CONSTEXPR OrderTimestamp::OrderTimestamp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.order_id_)*/uint64_t{0u}
  , /*decltype(_impl_.created_)*/uint64_t{0u}
  , /*decltype(_impl_.fulfilled_)*/uint64_t{0u}
  , /*decltype(_impl_.notified_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrderTimestampDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderTimestampDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderTimestampDefaultTypeInternal() {}
  union {
    OrderTimestamp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderTimestampDefaultTypeInternal _OrderTimestamp_default_instance_;
PROTOBUF_CONSTEXPR ClientCommand::ClientCommand(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClientCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientCommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientCommandDefaultTypeInternal() {}
  union {
    ClientCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientCommandDefaultTypeInternal _ClientCommand_default_instance_;
PROTOBUF_CONSTEXPR ServerCommand::ServerCommand(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerCommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerCommandDefaultTypeInternal() {}
  union {
    ServerCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerCommandDefaultTypeInternal _ServerCommand_default_instance_;
PROTOBUF_CONSTEXPR LogEntry::LogEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.level_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogEntryDefaultTypeInternal() {}
  union {
    LogEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogEntryDefaultTypeInternal _LogEntry_default_instance_;
PROTOBUF_CONSTEXPR RuntimeMetrics::RuntimeMetrics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestamp_ms_)*/int64_t{0}
  , /*decltype(_impl_.source_)*/0
  , /*decltype(_impl_.open_connections_)*/0
  , /*decltype(_impl_.rps_)*/0
  , /*decltype(_impl_.avg_latency_us_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RuntimeMetricsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RuntimeMetricsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RuntimeMetricsDefaultTypeInternal() {}
  union {
    RuntimeMetrics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RuntimeMetricsDefaultTypeInternal _RuntimeMetrics_default_instance_;
}  // namespace metadata
}  // namespace proto
}  // namespace gen
}  // namespace serialization
}  // namespace hft
static ::_pb::Metadata file_level_metadata_metadata_5fmessages_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_metadata_5fmessages_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_metadata_5fmessages_2eproto = nullptr;

const uint32_t TableStruct_metadata_5fmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hft::serialization::gen::proto::metadata::OrderTimestamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hft::serialization::gen::proto::metadata::OrderTimestamp, _impl_.order_id_),
  PROTOBUF_FIELD_OFFSET(::hft::serialization::gen::proto::metadata::OrderTimestamp, _impl_.created_),
  PROTOBUF_FIELD_OFFSET(::hft::serialization::gen::proto::metadata::OrderTimestamp, _impl_.fulfilled_),
  PROTOBUF_FIELD_OFFSET(::hft::serialization::gen::proto::metadata::OrderTimestamp, _impl_.notified_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hft::serialization::gen::proto::metadata::ClientCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hft::serialization::gen::proto::metadata::ClientCommand, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hft::serialization::gen::proto::metadata::ServerCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hft::serialization::gen::proto::metadata::ServerCommand, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hft::serialization::gen::proto::metadata::LogEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hft::serialization::gen::proto::metadata::LogEntry, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::hft::serialization::gen::proto::metadata::LogEntry, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::hft::serialization::gen::proto::metadata::LogEntry, _impl_.level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::hft::serialization::gen::proto::metadata::RuntimeMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::hft::serialization::gen::proto::metadata::RuntimeMetrics, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::hft::serialization::gen::proto::metadata::RuntimeMetrics, _impl_.timestamp_ms_),
  PROTOBUF_FIELD_OFFSET(::hft::serialization::gen::proto::metadata::RuntimeMetrics, _impl_.rps_),
  PROTOBUF_FIELD_OFFSET(::hft::serialization::gen::proto::metadata::RuntimeMetrics, _impl_.open_connections_),
  PROTOBUF_FIELD_OFFSET(::hft::serialization::gen::proto::metadata::RuntimeMetrics, _impl_.avg_latency_us_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::hft::serialization::gen::proto::metadata::OrderTimestamp)},
  { 10, -1, -1, sizeof(::hft::serialization::gen::proto::metadata::ClientCommand)},
  { 17, -1, -1, sizeof(::hft::serialization::gen::proto::metadata::ServerCommand)},
  { 24, -1, -1, sizeof(::hft::serialization::gen::proto::metadata::LogEntry)},
  { 33, -1, -1, sizeof(::hft::serialization::gen::proto::metadata::RuntimeMetrics)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::hft::serialization::gen::proto::metadata::_OrderTimestamp_default_instance_._instance,
  &::hft::serialization::gen::proto::metadata::_ClientCommand_default_instance_._instance,
  &::hft::serialization::gen::proto::metadata::_ServerCommand_default_instance_._instance,
  &::hft::serialization::gen::proto::metadata::_LogEntry_default_instance_._instance,
  &::hft::serialization::gen::proto::metadata::_RuntimeMetrics_default_instance_._instance,
};

const char descriptor_table_protodef_metadata_5fmessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027metadata_messages.proto\022$hft.serializa"
  "tion.gen.proto.metadata\"X\n\016OrderTimestam"
  "p\022\020\n\010order_id\030\001 \001(\004\022\017\n\007created\030\002 \001(\004\022\021\n\t"
  "fulfilled\030\003 \001(\004\022\020\n\010notified\030\004 \001(\004\"\355\001\n\rCl"
  "ientCommand\022F\n\004type\030\001 \001(\01628.hft.serializ"
  "ation.gen.proto.metadata.ClientCommand.T"
  "ype\"\223\001\n\004Type\022\013\n\007UNKNOWN\020\000\022\017\n\013TRADE_START"
  "\020\001\022\016\n\nTRADE_STOP\020\002\022\022\n\016TRADE_SPEED_UP\020\003\022\024"
  "\n\020TRADE_SPEED_DOWN\020\004\022\024\n\020KAFKA_FEED_START"
  "\020\005\022\023\n\017KAFKA_FEED_STOP\020\006\022\010\n\004STOP\020\007\"\314\001\n\rSe"
  "rverCommand\022F\n\004type\030\001 \001(\01628.hft.serializ"
  "ation.gen.proto.metadata.ServerCommand.T"
  "ype\"s\n\004Type\022\013\n\007UNKNOWN\020\000\022\024\n\020PRICE_FEED_S"
  "TART\020\001\022\023\n\017PRICE_FEED_STOP\020\002\022\024\n\020KAFKA_FEE"
  "D_START\020\003\022\023\n\017KAFKA_FEED_STOP\020\004\022\010\n\004STOP\020\005"
  "\"h\n\010LogEntry\022<\n\006source\030\001 \001(\0162,.hft.seria"
  "lization.gen.proto.metadata.Source\022\017\n\007me"
  "ssage\030\002 \001(\t\022\r\n\005level\030\003 \001(\t\"\243\001\n\016RuntimeMe"
  "trics\022<\n\006source\030\001 \001(\0162,.hft.serializatio"
  "n.gen.proto.metadata.Source\022\024\n\014timestamp"
  "_ms\030\002 \001(\003\022\013\n\003rps\030\003 \001(\001\022\030\n\020open_connectio"
  "ns\030\004 \001(\005\022\026\n\016avg_latency_us\030\005 \001(\001*-\n\006Sour"
  "ce\022\013\n\007UNKNOWN\020\000\022\n\n\006CLIENT\020\001\022\n\n\006SERVER\020\002b"
  "\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_metadata_5fmessages_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_metadata_5fmessages_2eproto = {
    false, false, 927, descriptor_table_protodef_metadata_5fmessages_2eproto,
    "metadata_messages.proto",
    &descriptor_table_metadata_5fmessages_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_metadata_5fmessages_2eproto::offsets,
    file_level_metadata_metadata_5fmessages_2eproto, file_level_enum_descriptors_metadata_5fmessages_2eproto,
    file_level_service_descriptors_metadata_5fmessages_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_metadata_5fmessages_2eproto_getter() {
  return &descriptor_table_metadata_5fmessages_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_metadata_5fmessages_2eproto(&descriptor_table_metadata_5fmessages_2eproto);
namespace hft {
namespace serialization {
namespace gen {
namespace proto {
namespace metadata {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientCommand_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_metadata_5fmessages_2eproto);
  return file_level_enum_descriptors_metadata_5fmessages_2eproto[0];
}
bool ClientCommand_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ClientCommand_Type ClientCommand::UNKNOWN;
constexpr ClientCommand_Type ClientCommand::TRADE_START;
constexpr ClientCommand_Type ClientCommand::TRADE_STOP;
constexpr ClientCommand_Type ClientCommand::TRADE_SPEED_UP;
constexpr ClientCommand_Type ClientCommand::TRADE_SPEED_DOWN;
constexpr ClientCommand_Type ClientCommand::KAFKA_FEED_START;
constexpr ClientCommand_Type ClientCommand::KAFKA_FEED_STOP;
constexpr ClientCommand_Type ClientCommand::STOP;
constexpr ClientCommand_Type ClientCommand::Type_MIN;
constexpr ClientCommand_Type ClientCommand::Type_MAX;
constexpr int ClientCommand::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerCommand_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_metadata_5fmessages_2eproto);
  return file_level_enum_descriptors_metadata_5fmessages_2eproto[1];
}
bool ServerCommand_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ServerCommand_Type ServerCommand::UNKNOWN;
constexpr ServerCommand_Type ServerCommand::PRICE_FEED_START;
constexpr ServerCommand_Type ServerCommand::PRICE_FEED_STOP;
constexpr ServerCommand_Type ServerCommand::KAFKA_FEED_START;
constexpr ServerCommand_Type ServerCommand::KAFKA_FEED_STOP;
constexpr ServerCommand_Type ServerCommand::STOP;
constexpr ServerCommand_Type ServerCommand::Type_MIN;
constexpr ServerCommand_Type ServerCommand::Type_MAX;
constexpr int ServerCommand::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Source_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_metadata_5fmessages_2eproto);
  return file_level_enum_descriptors_metadata_5fmessages_2eproto[2];
}
bool Source_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class OrderTimestamp::_Internal {
 public:
};

OrderTimestamp::OrderTimestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hft.serialization.gen.proto.metadata.OrderTimestamp)
}
OrderTimestamp::OrderTimestamp(const OrderTimestamp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderTimestamp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.order_id_){}
    , decltype(_impl_.created_){}
    , decltype(_impl_.fulfilled_){}
    , decltype(_impl_.notified_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.order_id_, &from._impl_.order_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.notified_) -
    reinterpret_cast<char*>(&_impl_.order_id_)) + sizeof(_impl_.notified_));
  // @@protoc_insertion_point(copy_constructor:hft.serialization.gen.proto.metadata.OrderTimestamp)
}

inline void OrderTimestamp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.order_id_){uint64_t{0u}}
    , decltype(_impl_.created_){uint64_t{0u}}
    , decltype(_impl_.fulfilled_){uint64_t{0u}}
    , decltype(_impl_.notified_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OrderTimestamp::~OrderTimestamp() {
  // @@protoc_insertion_point(destructor:hft.serialization.gen.proto.metadata.OrderTimestamp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderTimestamp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OrderTimestamp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderTimestamp::Clear() {
// @@protoc_insertion_point(message_clear_start:hft.serialization.gen.proto.metadata.OrderTimestamp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.order_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.notified_) -
      reinterpret_cast<char*>(&_impl_.order_id_)) + sizeof(_impl_.notified_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderTimestamp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 order_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.order_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 created = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.created_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 fulfilled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.fulfilled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 notified = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.notified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OrderTimestamp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hft.serialization.gen.proto.metadata.OrderTimestamp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 order_id = 1;
  if (this->_internal_order_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_order_id(), target);
  }

  // uint64 created = 2;
  if (this->_internal_created() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_created(), target);
  }

  // uint64 fulfilled = 3;
  if (this->_internal_fulfilled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_fulfilled(), target);
  }

  // uint64 notified = 4;
  if (this->_internal_notified() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_notified(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hft.serialization.gen.proto.metadata.OrderTimestamp)
  return target;
}

size_t OrderTimestamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hft.serialization.gen.proto.metadata.OrderTimestamp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 order_id = 1;
  if (this->_internal_order_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_order_id());
  }

  // uint64 created = 2;
  if (this->_internal_created() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_created());
  }

  // uint64 fulfilled = 3;
  if (this->_internal_fulfilled() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_fulfilled());
  }

  // uint64 notified = 4;
  if (this->_internal_notified() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_notified());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderTimestamp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderTimestamp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderTimestamp::GetClassData() const { return &_class_data_; }


void OrderTimestamp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderTimestamp*>(&to_msg);
  auto& from = static_cast<const OrderTimestamp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hft.serialization.gen.proto.metadata.OrderTimestamp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_order_id() != 0) {
    _this->_internal_set_order_id(from._internal_order_id());
  }
  if (from._internal_created() != 0) {
    _this->_internal_set_created(from._internal_created());
  }
  if (from._internal_fulfilled() != 0) {
    _this->_internal_set_fulfilled(from._internal_fulfilled());
  }
  if (from._internal_notified() != 0) {
    _this->_internal_set_notified(from._internal_notified());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderTimestamp::CopyFrom(const OrderTimestamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hft.serialization.gen.proto.metadata.OrderTimestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderTimestamp::IsInitialized() const {
  return true;
}

void OrderTimestamp::InternalSwap(OrderTimestamp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderTimestamp, _impl_.notified_)
      + sizeof(OrderTimestamp::_impl_.notified_)
      - PROTOBUF_FIELD_OFFSET(OrderTimestamp, _impl_.order_id_)>(
          reinterpret_cast<char*>(&_impl_.order_id_),
          reinterpret_cast<char*>(&other->_impl_.order_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderTimestamp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metadata_5fmessages_2eproto_getter, &descriptor_table_metadata_5fmessages_2eproto_once,
      file_level_metadata_metadata_5fmessages_2eproto[0]);
}

// ===================================================================

class ClientCommand::_Internal {
 public:
};

ClientCommand::ClientCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hft.serialization.gen.proto.metadata.ClientCommand)
}
ClientCommand::ClientCommand(const ClientCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientCommand* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:hft.serialization.gen.proto.metadata.ClientCommand)
}

inline void ClientCommand::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ClientCommand::~ClientCommand() {
  // @@protoc_insertion_point(destructor:hft.serialization.gen.proto.metadata.ClientCommand)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClientCommand::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:hft.serialization.gen.proto.metadata.ClientCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientCommand::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .hft.serialization.gen.proto.metadata.ClientCommand.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::hft::serialization::gen::proto::metadata::ClientCommand_Type>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hft.serialization.gen.proto.metadata.ClientCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .hft.serialization.gen.proto.metadata.ClientCommand.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hft.serialization.gen.proto.metadata.ClientCommand)
  return target;
}

size_t ClientCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hft.serialization.gen.proto.metadata.ClientCommand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .hft.serialization.gen.proto.metadata.ClientCommand.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientCommand::GetClassData() const { return &_class_data_; }


void ClientCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientCommand*>(&to_msg);
  auto& from = static_cast<const ClientCommand&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hft.serialization.gen.proto.metadata.ClientCommand)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientCommand::CopyFrom(const ClientCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hft.serialization.gen.proto.metadata.ClientCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientCommand::IsInitialized() const {
  return true;
}

void ClientCommand::InternalSwap(ClientCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientCommand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metadata_5fmessages_2eproto_getter, &descriptor_table_metadata_5fmessages_2eproto_once,
      file_level_metadata_metadata_5fmessages_2eproto[1]);
}

// ===================================================================

class ServerCommand::_Internal {
 public:
};

ServerCommand::ServerCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hft.serialization.gen.proto.metadata.ServerCommand)
}
ServerCommand::ServerCommand(const ServerCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerCommand* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:hft.serialization.gen.proto.metadata.ServerCommand)
}

inline void ServerCommand::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerCommand::~ServerCommand() {
  // @@protoc_insertion_point(destructor:hft.serialization.gen.proto.metadata.ServerCommand)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerCommand::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:hft.serialization.gen.proto.metadata.ServerCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerCommand::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .hft.serialization.gen.proto.metadata.ServerCommand.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::hft::serialization::gen::proto::metadata::ServerCommand_Type>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hft.serialization.gen.proto.metadata.ServerCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .hft.serialization.gen.proto.metadata.ServerCommand.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hft.serialization.gen.proto.metadata.ServerCommand)
  return target;
}

size_t ServerCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hft.serialization.gen.proto.metadata.ServerCommand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .hft.serialization.gen.proto.metadata.ServerCommand.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerCommand::GetClassData() const { return &_class_data_; }


void ServerCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerCommand*>(&to_msg);
  auto& from = static_cast<const ServerCommand&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hft.serialization.gen.proto.metadata.ServerCommand)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerCommand::CopyFrom(const ServerCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hft.serialization.gen.proto.metadata.ServerCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerCommand::IsInitialized() const {
  return true;
}

void ServerCommand::InternalSwap(ServerCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.type_, other->_impl_.type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerCommand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metadata_5fmessages_2eproto_getter, &descriptor_table_metadata_5fmessages_2eproto_once,
      file_level_metadata_metadata_5fmessages_2eproto[2]);
}

// ===================================================================

class LogEntry::_Internal {
 public:
};

LogEntry::LogEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hft.serialization.gen.proto.metadata.LogEntry)
}
LogEntry::LogEntry(const LogEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.source_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _impl_.level_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.level_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_level().empty()) {
    _this->_impl_.level_.Set(from._internal_level(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.source_ = from._impl_.source_;
  // @@protoc_insertion_point(copy_constructor:hft.serialization.gen.proto.metadata.LogEntry)
}

inline void LogEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.source_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.level_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.level_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogEntry::~LogEntry() {
  // @@protoc_insertion_point(destructor:hft.serialization.gen.proto.metadata.LogEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
  _impl_.level_.Destroy();
}

void LogEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:hft.serialization.gen.proto.metadata.LogEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.level_.ClearToEmpty();
  _impl_.source_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .hft.serialization.gen.proto.metadata.Source source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_source(static_cast<::hft::serialization::gen::proto::metadata::Source>(val));
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hft.serialization.gen.proto.metadata.LogEntry.message"));
        } else
          goto handle_unusual;
        continue;
      // string level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_level();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "hft.serialization.gen.proto.metadata.LogEntry.level"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hft.serialization.gen.proto.metadata.LogEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .hft.serialization.gen.proto.metadata.Source source = 1;
  if (this->_internal_source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_source(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hft.serialization.gen.proto.metadata.LogEntry.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // string level = 3;
  if (!this->_internal_level().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_level().data(), static_cast<int>(this->_internal_level().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "hft.serialization.gen.proto.metadata.LogEntry.level");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hft.serialization.gen.proto.metadata.LogEntry)
  return target;
}

size_t LogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hft.serialization.gen.proto.metadata.LogEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // string level = 3;
  if (!this->_internal_level().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_level());
  }

  // .hft.serialization.gen.proto.metadata.Source source = 1;
  if (this->_internal_source() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_source());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogEntry::GetClassData() const { return &_class_data_; }


void LogEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogEntry*>(&to_msg);
  auto& from = static_cast<const LogEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hft.serialization.gen.proto.metadata.LogEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (!from._internal_level().empty()) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_source() != 0) {
    _this->_internal_set_source(from._internal_source());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogEntry::CopyFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hft.serialization.gen.proto.metadata.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntry::IsInitialized() const {
  return true;
}

void LogEntry::InternalSwap(LogEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.level_, lhs_arena,
      &other->_impl_.level_, rhs_arena
  );
  swap(_impl_.source_, other->_impl_.source_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metadata_5fmessages_2eproto_getter, &descriptor_table_metadata_5fmessages_2eproto_once,
      file_level_metadata_metadata_5fmessages_2eproto[3]);
}

// ===================================================================

class RuntimeMetrics::_Internal {
 public:
};

RuntimeMetrics::RuntimeMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:hft.serialization.gen.proto.metadata.RuntimeMetrics)
}
RuntimeMetrics::RuntimeMetrics(const RuntimeMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RuntimeMetrics* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_ms_){}
    , decltype(_impl_.source_){}
    , decltype(_impl_.open_connections_){}
    , decltype(_impl_.rps_){}
    , decltype(_impl_.avg_latency_us_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.timestamp_ms_, &from._impl_.timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.avg_latency_us_) -
    reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.avg_latency_us_));
  // @@protoc_insertion_point(copy_constructor:hft.serialization.gen.proto.metadata.RuntimeMetrics)
}

inline void RuntimeMetrics::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_ms_){int64_t{0}}
    , decltype(_impl_.source_){0}
    , decltype(_impl_.open_connections_){0}
    , decltype(_impl_.rps_){0}
    , decltype(_impl_.avg_latency_us_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RuntimeMetrics::~RuntimeMetrics() {
  // @@protoc_insertion_point(destructor:hft.serialization.gen.proto.metadata.RuntimeMetrics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RuntimeMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RuntimeMetrics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RuntimeMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:hft.serialization.gen.proto.metadata.RuntimeMetrics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.avg_latency_us_) -
      reinterpret_cast<char*>(&_impl_.timestamp_ms_)) + sizeof(_impl_.avg_latency_us_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuntimeMetrics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .hft.serialization.gen.proto.metadata.Source source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_source(static_cast<::hft::serialization::gen::proto::metadata::Source>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double rps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.rps_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 open_connections = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.open_connections_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double avg_latency_us = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.avg_latency_us_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RuntimeMetrics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:hft.serialization.gen.proto.metadata.RuntimeMetrics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .hft.serialization.gen.proto.metadata.Source source = 1;
  if (this->_internal_source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_source(), target);
  }

  // int64 timestamp_ms = 2;
  if (this->_internal_timestamp_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp_ms(), target);
  }

  // double rps = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rps = this->_internal_rps();
  uint64_t raw_rps;
  memcpy(&raw_rps, &tmp_rps, sizeof(tmp_rps));
  if (raw_rps != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_rps(), target);
  }

  // int32 open_connections = 4;
  if (this->_internal_open_connections() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_open_connections(), target);
  }

  // double avg_latency_us = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_avg_latency_us = this->_internal_avg_latency_us();
  uint64_t raw_avg_latency_us;
  memcpy(&raw_avg_latency_us, &tmp_avg_latency_us, sizeof(tmp_avg_latency_us));
  if (raw_avg_latency_us != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_avg_latency_us(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hft.serialization.gen.proto.metadata.RuntimeMetrics)
  return target;
}

size_t RuntimeMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hft.serialization.gen.proto.metadata.RuntimeMetrics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 timestamp_ms = 2;
  if (this->_internal_timestamp_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp_ms());
  }

  // .hft.serialization.gen.proto.metadata.Source source = 1;
  if (this->_internal_source() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_source());
  }

  // int32 open_connections = 4;
  if (this->_internal_open_connections() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_open_connections());
  }

  // double rps = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rps = this->_internal_rps();
  uint64_t raw_rps;
  memcpy(&raw_rps, &tmp_rps, sizeof(tmp_rps));
  if (raw_rps != 0) {
    total_size += 1 + 8;
  }

  // double avg_latency_us = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_avg_latency_us = this->_internal_avg_latency_us();
  uint64_t raw_avg_latency_us;
  memcpy(&raw_avg_latency_us, &tmp_avg_latency_us, sizeof(tmp_avg_latency_us));
  if (raw_avg_latency_us != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RuntimeMetrics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RuntimeMetrics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RuntimeMetrics::GetClassData() const { return &_class_data_; }


void RuntimeMetrics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RuntimeMetrics*>(&to_msg);
  auto& from = static_cast<const RuntimeMetrics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:hft.serialization.gen.proto.metadata.RuntimeMetrics)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timestamp_ms() != 0) {
    _this->_internal_set_timestamp_ms(from._internal_timestamp_ms());
  }
  if (from._internal_source() != 0) {
    _this->_internal_set_source(from._internal_source());
  }
  if (from._internal_open_connections() != 0) {
    _this->_internal_set_open_connections(from._internal_open_connections());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rps = from._internal_rps();
  uint64_t raw_rps;
  memcpy(&raw_rps, &tmp_rps, sizeof(tmp_rps));
  if (raw_rps != 0) {
    _this->_internal_set_rps(from._internal_rps());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_avg_latency_us = from._internal_avg_latency_us();
  uint64_t raw_avg_latency_us;
  memcpy(&raw_avg_latency_us, &tmp_avg_latency_us, sizeof(tmp_avg_latency_us));
  if (raw_avg_latency_us != 0) {
    _this->_internal_set_avg_latency_us(from._internal_avg_latency_us());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RuntimeMetrics::CopyFrom(const RuntimeMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hft.serialization.gen.proto.metadata.RuntimeMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuntimeMetrics::IsInitialized() const {
  return true;
}

void RuntimeMetrics::InternalSwap(RuntimeMetrics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RuntimeMetrics, _impl_.avg_latency_us_)
      + sizeof(RuntimeMetrics::_impl_.avg_latency_us_)
      - PROTOBUF_FIELD_OFFSET(RuntimeMetrics, _impl_.timestamp_ms_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_ms_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RuntimeMetrics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_metadata_5fmessages_2eproto_getter, &descriptor_table_metadata_5fmessages_2eproto_once,
      file_level_metadata_metadata_5fmessages_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace metadata
}  // namespace proto
}  // namespace gen
}  // namespace serialization
}  // namespace hft
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::hft::serialization::gen::proto::metadata::OrderTimestamp*
Arena::CreateMaybeMessage< ::hft::serialization::gen::proto::metadata::OrderTimestamp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hft::serialization::gen::proto::metadata::OrderTimestamp >(arena);
}
template<> PROTOBUF_NOINLINE ::hft::serialization::gen::proto::metadata::ClientCommand*
Arena::CreateMaybeMessage< ::hft::serialization::gen::proto::metadata::ClientCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hft::serialization::gen::proto::metadata::ClientCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::hft::serialization::gen::proto::metadata::ServerCommand*
Arena::CreateMaybeMessage< ::hft::serialization::gen::proto::metadata::ServerCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hft::serialization::gen::proto::metadata::ServerCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::hft::serialization::gen::proto::metadata::LogEntry*
Arena::CreateMaybeMessage< ::hft::serialization::gen::proto::metadata::LogEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hft::serialization::gen::proto::metadata::LogEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::hft::serialization::gen::proto::metadata::RuntimeMetrics*
Arena::CreateMaybeMessage< ::hft::serialization::gen::proto::metadata::RuntimeMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::hft::serialization::gen::proto::metadata::RuntimeMetrics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
