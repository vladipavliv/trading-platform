// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_METADATA_HFT_SERIALIZATION_GEN_FBS_META_H_
#define FLATBUFFERS_GENERATED_METADATA_HFT_SERIALIZATION_GEN_FBS_META_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 2 &&
              FLATBUFFERS_VERSION_MINOR == 0 &&
              FLATBUFFERS_VERSION_REVISION == 8,
             "Non-compatible flatbuffers version included");

namespace hft {
namespace serialization {
namespace gen {
namespace fbs {
namespace meta {

struct OrderTimestamp;
struct OrderTimestampBuilder;
struct OrderTimestampT;

struct OrderTimestampT : public flatbuffers::NativeTable {
  typedef OrderTimestamp TableType;
  uint64_t order_id = 0;
  uint64_t created = 0;
  uint64_t fulfilled = 0;
  uint64_t notified = 0;
};

struct OrderTimestamp FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef OrderTimestampT NativeTableType;
  typedef OrderTimestampBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ORDER_ID = 4,
    VT_CREATED = 6,
    VT_FULFILLED = 8,
    VT_NOTIFIED = 10
  };
  uint64_t order_id() const {
    return GetField<uint64_t>(VT_ORDER_ID, 0);
  }
  uint64_t created() const {
    return GetField<uint64_t>(VT_CREATED, 0);
  }
  uint64_t fulfilled() const {
    return GetField<uint64_t>(VT_FULFILLED, 0);
  }
  uint64_t notified() const {
    return GetField<uint64_t>(VT_NOTIFIED, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_ORDER_ID, 8) &&
           VerifyField<uint64_t>(verifier, VT_CREATED, 8) &&
           VerifyField<uint64_t>(verifier, VT_FULFILLED, 8) &&
           VerifyField<uint64_t>(verifier, VT_NOTIFIED, 8) &&
           verifier.EndTable();
  }
  OrderTimestampT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(OrderTimestampT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<OrderTimestamp> Pack(flatbuffers::FlatBufferBuilder &_fbb, const OrderTimestampT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct OrderTimestampBuilder {
  typedef OrderTimestamp Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_order_id(uint64_t order_id) {
    fbb_.AddElement<uint64_t>(OrderTimestamp::VT_ORDER_ID, order_id, 0);
  }
  void add_created(uint64_t created) {
    fbb_.AddElement<uint64_t>(OrderTimestamp::VT_CREATED, created, 0);
  }
  void add_fulfilled(uint64_t fulfilled) {
    fbb_.AddElement<uint64_t>(OrderTimestamp::VT_FULFILLED, fulfilled, 0);
  }
  void add_notified(uint64_t notified) {
    fbb_.AddElement<uint64_t>(OrderTimestamp::VT_NOTIFIED, notified, 0);
  }
  explicit OrderTimestampBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<OrderTimestamp> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<OrderTimestamp>(end);
    return o;
  }
};

inline flatbuffers::Offset<OrderTimestamp> CreateOrderTimestamp(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t order_id = 0,
    uint64_t created = 0,
    uint64_t fulfilled = 0,
    uint64_t notified = 0) {
  OrderTimestampBuilder builder_(_fbb);
  builder_.add_notified(notified);
  builder_.add_fulfilled(fulfilled);
  builder_.add_created(created);
  builder_.add_order_id(order_id);
  return builder_.Finish();
}

flatbuffers::Offset<OrderTimestamp> CreateOrderTimestamp(flatbuffers::FlatBufferBuilder &_fbb, const OrderTimestampT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline OrderTimestampT *OrderTimestamp::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<OrderTimestampT>(new OrderTimestampT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void OrderTimestamp::UnPackTo(OrderTimestampT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = order_id(); _o->order_id = _e; }
  { auto _e = created(); _o->created = _e; }
  { auto _e = fulfilled(); _o->fulfilled = _e; }
  { auto _e = notified(); _o->notified = _e; }
}

inline flatbuffers::Offset<OrderTimestamp> OrderTimestamp::Pack(flatbuffers::FlatBufferBuilder &_fbb, const OrderTimestampT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateOrderTimestamp(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<OrderTimestamp> CreateOrderTimestamp(flatbuffers::FlatBufferBuilder &_fbb, const OrderTimestampT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const OrderTimestampT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _order_id = _o->order_id;
  auto _created = _o->created;
  auto _fulfilled = _o->fulfilled;
  auto _notified = _o->notified;
  return hft::serialization::gen::fbs::meta::CreateOrderTimestamp(
      _fbb,
      _order_id,
      _created,
      _fulfilled,
      _notified);
}

inline const hft::serialization::gen::fbs::meta::OrderTimestamp *GetOrderTimestamp(const void *buf) {
  return flatbuffers::GetRoot<hft::serialization::gen::fbs::meta::OrderTimestamp>(buf);
}

inline const hft::serialization::gen::fbs::meta::OrderTimestamp *GetSizePrefixedOrderTimestamp(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<hft::serialization::gen::fbs::meta::OrderTimestamp>(buf);
}

inline bool VerifyOrderTimestampBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<hft::serialization::gen::fbs::meta::OrderTimestamp>(nullptr);
}

inline bool VerifySizePrefixedOrderTimestampBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<hft::serialization::gen::fbs::meta::OrderTimestamp>(nullptr);
}

inline void FinishOrderTimestampBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<hft::serialization::gen::fbs::meta::OrderTimestamp> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedOrderTimestampBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<hft::serialization::gen::fbs::meta::OrderTimestamp> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<hft::serialization::gen::fbs::meta::OrderTimestampT> UnPackOrderTimestamp(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<hft::serialization::gen::fbs::meta::OrderTimestampT>(GetOrderTimestamp(buf)->UnPack(res));
}

inline std::unique_ptr<hft::serialization::gen::fbs::meta::OrderTimestampT> UnPackSizePrefixedOrderTimestamp(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<hft::serialization::gen::fbs::meta::OrderTimestampT>(GetSizePrefixedOrderTimestamp(buf)->UnPack(res));
}

}  // namespace meta
}  // namespace fbs
}  // namespace gen
}  // namespace serialization
}  // namespace hft

#endif  // FLATBUFFERS_GENERATED_METADATA_HFT_SERIALIZATION_GEN_FBS_META_H_
